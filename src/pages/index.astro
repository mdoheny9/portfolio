---
import '../styles/global.css';
import Header from "../components/Navigation/Header.astro"
import Parallax from "../components/Parallax/Parallax"

import About, { bgColour as aboutBg, bgImage as aboutImg } from "./About.astro";
import Portfolio, { bgColour as portfolioBg, bgImage as portfolioImg } from "./Portfolio.astro";
import Photography, { bgColour as photoBg, bgImage as photoImg } from "./Photography.astro";
import Contact, { bgColour as contactBg, bgImage as contactImg } from "./Contact.astro";

const pageTitle = "Welcome!"
const bgImage = "/assets/backgrounds/Layer61.png";
const bgColour = "#291b13";
---
<Parallax client:visible />
<div class="maincontain">
	<Header />
	<section id="about" data-threshold = ".8" data-bg={aboutBg} data-image={aboutImg}><About /></section>
	<section id="portfolio" data-bg={portfolioBg} data-image={portfolioImg}><Portfolio /></section>
	<section id="photography" data-threshold = ".25" data-bg={photoBg} data-image={photoImg}><Photography /></section>
	<section id="contact" data-bg={contactBg} data-image={contactImg}><Contact /></section>
</div>
<footer>
</footer>

<script>
	const sections = [...document.querySelectorAll<HTMLElement>('section')];
	const mainContain = document.querySelector<HTMLElement>('.maincontain');

	const handleIntersect = (entries: IntersectionObserverEntry[]) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				const target = entry.target as HTMLElement;
				const bgColor = target.dataset.bg ?? ""; // explicitly cast fallback as ""
				const bgImage = target.dataset.image ?? "";
				if (!mainContain) return; // ensure mainContain
				if (bgImage && bgColor) {
					mainContain.style.background = `${bgColor} url(${bgImage})`;
				} else if (bgImage) {
					mainContain.style.background = `url(${bgImage})`;
				} else {
					mainContain.style.background = bgColor;
				}	
			}
		});
	};

	sections.forEach(section => {
		const threshold = parseFloat(section.dataset.threshold ?? "") || 0.5; // default 0.5, explicitly cast fallback as ""
		const observer = new IntersectionObserver(handleIntersect, { threshold });
		observer.observe(section);
	});
</script>
